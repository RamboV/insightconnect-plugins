# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Install policy to selected targets"


class Input:
    DISCARD_OTHER_SESSIONS = "discard_other_sessions"
    INSTALL_ON_ALL_CLUSTER_MEMBERS_OR_FAIL = "install_on_all_cluster_members_or_fail"
    POLICY_PACKAGE = "policy_package"
    TARGETS = "targets"
    

class Output:
    SUCCESS = "success"
    

class InstallPolicyInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "discard_other_sessions": {
      "type": "boolean",
      "title": "Discard Other Sessions",
      "description": "Discard all other user sessions. This can fix errors when objects are locked by other sessions",
      "default": true,
      "order": 4
    },
    "install_on_all_cluster_members_or_fail": {
      "type": "boolean",
      "title": "Install Access Control Policy",
      "description": "Relevant for the gateway clusters. If true, the policy is installed on all the cluster members. If the installation on a cluster member fails, don't install on that cluster",
      "default": false,
      "order": 3
    },
    "policy_package": {
      "type": "string",
      "title": "Policy Package",
      "description": "Policy package to install e.g. \\"standard\\"",
      "default": "standard",
      "order": 1
    },
    "targets": {
      "type": "array",
      "title": "Targets",
      "description": "On what targets to execute this command. Targets may be identified by their name, or object unique identifier. e.g. [\\"checkpoint_fw\\"]",
      "items": {
        "type": "string"
      },
      "default": [
        "target name"
      ],
      "order": 2
    }
  },
  "required": [
    "discard_other_sessions"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class InstallPolicyOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "success": {
      "type": "boolean",
      "title": "Success",
      "description": "Success",
      "order": 1
    }
  },
  "required": [
    "success"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
